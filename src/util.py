import numpy as np
import random

from copy import deepcopy


CHARSET_A = np.array([
    [1, 1, -1, -1, 1, 1, 1],
    [1, -1, -1, -1, -1, 1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, -1, -1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1]
])
CHARSET_B = np.array([
    [-1, -1, -1, -1, -1, -1, 1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, -1, -1, -1, 1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, 1, 1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 1]
])
CHARSET_C = np.array([
    [1, 1, -1, -1, -1, -1, 1],
    [1, -1, -1, 1, 1, -1, -1],
    [-1, -1, 1, 1, 1, 1, 1],
    [-1, -1, 1, 1, 1, 1, 1],
    [-1, -1, 1, 1, 1, 1, 1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, 1, -1, -1, -1, -1, 1]
])
CHARSET_D = np.array([
    [-1, -1, -1, -1, -1, 1, 1],
    [1, -1, -1, 1, -1, -1, 1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, 1, -1, -1, 1],
    [-1, -1, -1, -1, -1, 1, 1]
])
CHARSET_E = np.array([
    [-1, -1, -1, -1, -1, -1, -1],
    [1, -1, -1, 1, 1, 1, -1],
    [1, -1, -1, 1, -1, 1, 1],
    [1, -1, -1, -1, -1, 1, 1],
    [1, -1, -1, 1, -1, 1, 1],
    [1, -1, -1, 1, 1, 1, -1],
    [-1, -1, -1, -1, -1, -1, -1]
])
CHARSET_F = np.array([
    [-1, -1, -1, -1, -1, -1, -1],
    [1, -1, -1, 1, 1, 1, -1],
    [1, -1, -1, 1, -1, 1, 1],
    [1, -1, -1, -1, -1, 1, 1],
    [1, -1, -1, 1, -1, 1, 1],
    [1, -1, -1, 1, 1, 1, 1],
    [-1, -1, -1, -1, 1, 1, 1]
])
CHARSET_G = np.array([
    [1, 1, -1, -1, -1, -1, 1],
    [1, -1, -1, 1, 1, -1, -1],
    [-1, -1, 1, 1, 1, 1, 1],
    [-1, -1, 1, 1, 1, 1, 1],
    [-1, -1, 1, 1, -1, -1, -1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, 1, -1, -1, -1, -1, -1]
])
CHARSET_H = np.array([
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, -1, -1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1]
])
CHARSET_I = np.array([
    [1, -1, -1, -1, -1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, -1, -1, -1, -1, 1, 1],
])
CHARSET_J = np.array([
    [1, 1, 1, -1, -1, -1, -1],
    [1, 1, 1, 1, -1, -1, 1],
    [1, 1, 1, 1, -1, -1, 1],
    [1, 1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, -1, 1, 1]
])
CHARSET_K = np.array([
    [-1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, 1, -1, -1, 1],
    [1, -1, -1, -1, -1, 1, 1],
    [1, -1, -1, 1, -1, -1, 1],
    [1, -1, -1, 1, 1, -1, -1],
    [-1, -1, -1, 1, 1, -1, -1]
])
CHARSET_L = np.array([
    [-1, -1, -1, -1, 1, 1, 1],
    [1, -1, -1, 1, 1, 1, 1],
    [1, -1, -1, 1, 1, 1, 1],
    [1, -1, -1, 1, 1, 1, 1],
    [1, -1, -1, 1, 1, 1, -1],
    [1, -1, -1, 1, 1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1]
])
CHARSET_M = np.array([
    [-1, -1, 1, 1, 1, -1, -1],
    [-1, -1, -1, 1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -1, 1, -1, 1, -1, -1],
    [-1, -1, 1, 1, 1, -1, -1],
    [-1, -1, 1, 1, 1, -1, -1]
])
CHARSET_N = np.array([
    [-1, -1, 1, 1, 1, -1, -1],
    [-1, -1, -1, 1, 1, -1, -1],
    [-1, -1, -1, -1, 1, -1, -1],
    [-1, -1, 1, -1, -1, -1, -1],
    [-1, -1, 1, 1, -1, -1, -1],
    [-1, -1, 1, 1, 1, -1, -1],
    [-1, -1, 1, 1, 1, -1, -1]
])
CHARSET_O = np.array([
    [1, 1, -1, -1, -1, 1, 1],
    [1, -1, -1, 1, -1, -1, 1],
    [-1, -1, 1, 1, 1, -1, -1],
    [-1, -1, 1, 1, 1, -1, -1],
    [-1, -1, 1, 1, 1, -1, -1],
    [1, -1, -1, 1, -1, -1, 1],
    [1, 1, -1, -1, -1, 1, 1]
])
CHARSET_P = np.array([
    [-1, -1, -1, -1, -1, -1, 1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, -1, -1, -1, 1],
    [1, -1, -1, 1, 1, 1, 1],
    [1, -1, -1, 1, 1, 1, 1],
    [-1, -1, -1, -1, 1, 1, 1]
])
CHARSET_Q = np.array([
    [1, -1, -1, -1, -1, 1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, -1, -1, -1, 1],
    [1, -1, -1, -1, -1, 1, 1],
    [1, 1, 1, -1, -1, -1, 1]
])
CHARSET_R = np.array([
    [-1, -1, -1, -1, -1, -1, 1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, -1, -1, -1, 1],
    [1, -1, -1, 1, -1, -1, 1],
    [1, -1, -1, 1, 1, -1, -1],
    [-1, -1, -1, 1, 1, -1, -1]
])
CHARSET_S = np.array([
    [1, -1, -1, -1, -1, 1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, -1, 1, 1, 1, 1],
    [1, -1, -1, -1, 1, 1, 1],
    [1, 1, 1, -1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, -1, 1, 1]
])
CHARSET_T = np.array([
    [-1, -1, -1, -1, -1, -1, 1],
    [-1, 1, -1, -1, 1, -1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, -1, -1, -1, -1, 1, 1]
])
CHARSET_U = np.array([
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, -1, -1, -1, -1, 1]
])
CHARSET_V = np.array([
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, -1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1]
])
CHARSET_W = np.array([
    [-1, -1, 1, 1, 1, -1, -1],
    [-1, -1, 1, 1, 1, -1, -1],
    [-1, -1, 1, 1, 1, -1, -1],
    [-1, -1, 1, -1, 1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, 1, -1, -1, -1],
    [-1, -1, 1, 1, 1, -1, -1]
])
CHARSET_X = np.array([
    [-1, -1, 1, 1, 1, -1, -1],
    [-1, -1, 1, 1, 1, -1, -1],
    [1, -1, -1, 1, -1, -1, 1],
    [1, 1, -1, -1, -1, 1, 1],
    [1, 1, -1, -1, -1, 1, 1],
    [1, -1, -1, 1, -1, -1, 1],
    [-1, -1, 1, 1, 1, -1, -1]
])
CHARSET_Y = np.array([
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, -1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, -1, -1, -1, -1, 1, 1]
])
CHARSET_Z = np.array([
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -1, 1, 1, 1, -1, -1],
    [-1, 1, 1, 1, -1, -1, 1],
    [1, 1, 1, -1, -1, 1, 1],
    [1, 1, -1, -1, 1, 1, -1],
    [1, -1, -1, 1, 1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1]
])

CHARSET_a = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [1, -1, -1, -1, -1, 1, 1],
    [1, 1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, 1, -1, -1]
])
CHARSET_b = np.array([
    [-1, -1, -1, 1, 1, 1, 1],
    [1, -1, -1, 1, 1, 1, 1],
    [1, -1, -1, 1, 1, 1, 1],
    [1, -1, -1, -1, -1, -1, 1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, 1, 1, -1, -1],
    [-1, -1, 1, -1, -1, -1, 1]
])
CHARSET_c = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [1, -1, -1, -1, -1, 1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, 1, 1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, -1, 1, 1]
])
CHARSET_d = np.array([
    [1, 1, 1, -1, -1, -1, 1],
    [1, 1, 1, 1, -1, -1, 1],
    [1, 1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, 1, -1, -1]
])
CHARSET_e = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [1, -1, -1, -1, -1, 1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, -1, -1, -1, -1, 1],
    [-1, -1, 1, 1, 1, 1, 1],
    [1, -1, -1, -1, -1, 1, 1]
])
CHARSET_f = np.array([
    [1, 1, -1, -1, -1, 1, 1],
    [1, -1, -1, 1, -1, -1, 1],
    [1, -1, -1, 1, 1, 1, 1],
    [-1, -1, -1, -1, 1, 1, 1],
    [1, -1, -1, 1, 1, 1, 1],
    [1, -1, -1, 1, 1, 1, 1],
    [-1, -1, -1, -1, 1, 1, 1]
])
CHARSET_g = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [1, -1, -1, -1, 1, -1, -1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, -1, -1, 1],
    [1, 1, 1, 1, -1, -1, 1],
    [-1, -1, -1, -1, -1, 1, 1]
])
CHARSET_h = np.array([
    [-1, -1, -1, 1, 1, 1, 1],
    [1, -1, -1, 1, 1, 1, 1],
    [1, -1, -1, 1, -1, -1, 1],
    [1, -1, -1, -1, 1, -1, -1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, 1, 1, -1, -1],
    [-1, -1, -1, 1, 1, -1, -1]
])
CHARSET_i = np.array([
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [1, -1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, -1, -1, -1, -1, 1, 1]
])
CHARSET_j = np.array([
    [1, 1, 1, 1, -1, -1, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, -1, -1, 1],
    [1, 1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, -1, 1, 1]
])
CHARSET_k = np.array([
    [-1, -1, -1, 1, 1, 1, 1],
    [1, -1, -1, 1, 1, 1, 1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, 1, -1, -1, 1],
    [1, -1, -1, -1, -1, 1, 1],
    [1, -1, -1, 1, -1, -1, 1],
    [-1, -1, -1, 1, 1, -1, -1]
])
CHARSET_l = np.array([
    [1, -1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
])
CHARSET_m = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -1, 1, -1, 1, -1, -1],
    [-1, -1, 1, 1, 1, -1, -1]
])
CHARSET_n = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [-1, -1, -1, -1, -1, 1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1]
])
CHARSET_o = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [1, -1, -1, -1, -1, 1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, -1, 1, 1]
])
CHARSET_p = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [-1, -1, 1, -1, -1, -1, 1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, -1, -1, -1, 1],
    [1, -1, -1, 1, 1, 1, 1],
    [-1, -1, -1, -1, 1, 1, 1]
])
CHARSET_q = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [1, -1, -1, -1, 1, -1, -1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, -1, -1, 1],
    [1, 1, 1, 1, -1, -1, 1],
    [1, 1, 1, -1, -1, -1, -1]
])
CHARSET_r = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [-1, -1, 1, -1, -1, -1, 1],
    [1, -1, -1, -1, 1, -1, -1],
    [1, -1, -1, 1, 1, -1, -1],
    [1, -1, -1, 1, 1, 1, 1],
    [-1, -1, -1, -1, 1, 1, 1]
])
CHARSET_s = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [1, -1, -1, -1, -1, -1, 1],
    [-1, -1, 1, 1, 1, 1, 1],
    [1, -1, -1, -1, -1, 1, 1],
    [1, 1, 1, 1, -1, -1, 1],
    [-1, -1, -1, -1, -1, 1, 1]
])
CHARSET_t = np.array([
    [1, 1, 1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, -1, -1, -1, -1, -1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, 1, -1, -1, 1, -1, 1],
    [1, 1, 1, -1, -1, 1, 1]
])
CHARSET_u = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, 1, -1, -1]
])
CHARSET_v = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, -1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1]
])
CHARSET_w = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [-1, -1, 1, 1, 1, -1, -1],
    [-1, -1, 1, -1, 1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1],
    [1, -1, -1, 1, -1, -1, 1]
])
CHARSET_x = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [-1, -1, 1, 1, 1, -1, -1],
    [1, -1, -1, 1, -1, -1, 1],
    [1, 1, -1, -1, -1, 1, 1],
    [1, -1, -1, 1, -1, -1, 1],
    [-1, -1, 1, 1, 1, -1, -1]
])
CHARSET_y = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [-1, -1, 1, 1, -1, -1, 1],
    [1, -1, -1, -1, -1, -1, 1],
    [1, 1, 1, 1, -1, -1, 1],
    [-1, -1, -1, -1, -1, 1, 1]
])
CHARSET_z = np.array([
    [1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1],
    [-1, -1, -1, -1, -1, -1, 1],
    [-1, 1, 1, -1, -1, 1, 1],
    [1, 1, -1, -1, 1, 1, 1],
    [1, -1, -1, 1, 1, -1, 1],
    [-1, -1, -1, -1, -1, -1, 1]
])


def get_base_charset():
    return [
        {
            'key_pattern': CHARSET_A,
            'key_class': 'A',
            'response_pattern': CHARSET_a,
            'response_class': 'a'
        },
        {
            'key_pattern': CHARSET_B,
            'key_class': 'B',
            'response_pattern': CHARSET_b,
            'response_class': 'b'
        },
        {
            'key_pattern': CHARSET_C,
            'key_class': 'C',
            'response_pattern': CHARSET_c,
            'response_class': 'c'
        },
        {
            'key_pattern': CHARSET_D,
            'key_class': 'D',
            'response_pattern': CHARSET_d,
            'response_class': 'd'
        },
        {
            'key_pattern': CHARSET_E,
            'key_class': 'E',
            'response_pattern': CHARSET_e,
            'response_class': 'e'
        },
        {
            'key_pattern': CHARSET_F,
            'key_class': 'F',
            'response_pattern': CHARSET_f,
            'response_class': 'f'
        },
        {
            'key_pattern': CHARSET_G,
            'key_class': 'G',
            'response_pattern': CHARSET_g,
            'response_class': 'g'
        },
        {
            'key_pattern': CHARSET_H,
            'key_class': 'H',
            'response_pattern': CHARSET_h,
            'response_class': 'h'
        },
        {
            'key_pattern': CHARSET_I,
            'key_class': 'I',
            'response_pattern': CHARSET_i,
            'response_class': 'i'
        },
        {
            'key_pattern': CHARSET_J,
            'key_class': 'J',
            'response_pattern': CHARSET_j,
            'response_class': 'j'
        },
        {
            'key_pattern': CHARSET_K,
            'key_class': 'K',
            'response_pattern': CHARSET_k,
            'response_class': 'k'
        },
        {
            'key_pattern': CHARSET_L,
            'key_class': 'L',
            'response_pattern': CHARSET_l,
            'response_class': 'l'
        },
        {
            'key_pattern': CHARSET_M,
            'key_class': 'M',
            'response_pattern': CHARSET_m,
            'response_class': 'm'
        },
        {
            'key_pattern': CHARSET_N,
            'key_class': 'N',
            'response_pattern': CHARSET_n,
            'response_class': 'n'
        },
        {
            'key_pattern': CHARSET_O,
            'key_class': 'O',
            'response_pattern': CHARSET_o,
            'response_class': 'o'
        },
        {
            'key_pattern': CHARSET_P,
            'key_class': 'P',
            'response_pattern': CHARSET_p,
            'response_class': 'p'
        },
        {
            'key_pattern': CHARSET_Q,
            'key_class': 'Q',
            'response_pattern': CHARSET_q,
            'response_class': 'q'
        },
        {
            'key_pattern': CHARSET_R,
            'key_class': 'R',
            'response_pattern': CHARSET_r,
            'response_class': 'r'
        },
        {
            'key_pattern': CHARSET_S,
            'key_class': 'S',
            'response_pattern': CHARSET_s,
            'response_class': 's'
        },
        {
            'key_pattern': CHARSET_T,
            'key_class': 'T',
            'response_pattern': CHARSET_t,
            'response_class': 't'
        },
        {
            'key_pattern': CHARSET_U,
            'key_class': 'U',
            'response_pattern': CHARSET_u,
            'response_class': 'u'
        },
        {
            'key_pattern': CHARSET_V,
            'key_class': 'V',
            'response_pattern': CHARSET_v,
            'response_class': 'v'
        },
        {
            'key_pattern': CHARSET_W,
            'key_class': 'W',
            'response_pattern': CHARSET_w,
            'response_class': 'w'
        },
        {
            'key_pattern': CHARSET_X,
            'key_class': 'X',
            'response_pattern': CHARSET_x,
            'response_class': 'x'
        },
        {
            'key_pattern': CHARSET_Y,
            'key_class': 'Y',
            'response_pattern': CHARSET_y,
            'response_class': 'y'
        },
        {
            'key_pattern': CHARSET_Z,
            'key_class': 'Z',
            'response_pattern': CHARSET_z,
            'response_class': 'z'
        }
    ]


def get_train_charset():
    return get_base_charset()


def get_validation_charset(noise=0.0, count=10):
    population = list(np.arange(49))
    noise_count = int(49 * noise)
    base_charset = get_base_charset()
    validation_charset = list()

    for c in range(len(base_charset)):
        for _ in range(count):
            temp = deepcopy(base_charset)
            char = temp[c]
            noise_sample = random.sample(population, noise_count)
            for n in noise_sample:
                i = int(n/7)
                j = n % 7
                char['key_pattern'][i][j] = char['key_pattern'][i][j] * -1
            validation_charset.append(char)

    return validation_charset


if __name__ == '__main__':
    validation_set = get_validation_charset(noise=0.1, count=10)
    # print(validation_set)
    for item in validation_set:
        print(item['key_class'], item['key_pattern'])
